//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Cristian/source/repos/CompilatorLFC/CompilatorLFC/MiniLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniLanguageParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IMiniLanguageVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] MiniLanguageParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.globalLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobalLine([NotNull] MiniLanguageParser.GlobalLineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] MiniLanguageParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.returnType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnType([NotNull] MiniLanguageParser.ReturnTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.printFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrintFunction([NotNull] MiniLanguageParser.PrintFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterList([NotNull] MiniLanguageParser.ParameterListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter([NotNull] MiniLanguageParser.ParameterContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionBody([NotNull] MiniLanguageParser.FunctionBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] MiniLanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] MiniLanguageParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] MiniLanguageParser.ArgumentListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument([NotNull] MiniLanguageParser.ArgumentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>decrementExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecrementExp([NotNull] MiniLanguageParser.DecrementExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>constantAtomExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantAtomExp([NotNull] MiniLanguageParser.ConstantAtomExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>minusExpression</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinusExpression([NotNull] MiniLanguageParser.MinusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>incrementExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncrementExp([NotNull] MiniLanguageParser.IncrementExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numericAtomExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericAtomExp([NotNull] MiniLanguageParser.NumericAtomExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>powerExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPowerExp([NotNull] MiniLanguageParser.PowerExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>mulDivModExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivModExp([NotNull] MiniLanguageParser.MulDivModExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesisExp([NotNull] MiniLanguageParser.ParenthesisExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addSubExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSubExp([NotNull] MiniLanguageParser.AddSubExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>functionExp</c>
	/// labeled alternative in <see cref="MiniLanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionExp([NotNull] MiniLanguageParser.FunctionExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>paranthesisCond</c>
	/// labeled alternative in <see cref="MiniLanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParanthesisCond([NotNull] MiniLanguageParser.ParanthesisCondContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expCond</c>
	/// labeled alternative in <see cref="MiniLanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpCond([NotNull] MiniLanguageParser.ExpCondContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>relationalOpCond</c>
	/// labeled alternative in <see cref="MiniLanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalOpCond([NotNull] MiniLanguageParser.RelationalOpCondContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notCond</c>
	/// labeled alternative in <see cref="MiniLanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotCond([NotNull] MiniLanguageParser.NotCondContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicalOpCond</c>
	/// labeled alternative in <see cref="MiniLanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOpCond([NotNull] MiniLanguageParser.LogicalOpCondContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postIncrementation</c>
	/// labeled alternative in <see cref="MiniLanguageParser.increment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostIncrementation([NotNull] MiniLanguageParser.PostIncrementationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preIncrementation</c>
	/// labeled alternative in <see cref="MiniLanguageParser.increment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreIncrementation([NotNull] MiniLanguageParser.PreIncrementationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postDecrementation</c>
	/// labeled alternative in <see cref="MiniLanguageParser.decrement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostDecrementation([NotNull] MiniLanguageParser.PostDecrementationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preDecrementation</c>
	/// labeled alternative in <see cref="MiniLanguageParser.decrement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreDecrementation([NotNull] MiniLanguageParser.PreDecrementationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.instructionSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInstructionSet([NotNull] MiniLanguageParser.InstructionSetContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] MiniLanguageParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCodeBlock([NotNull] MiniLanguageParser.CodeBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.ifBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfBlock([NotNull] MiniLanguageParser.IfBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseBlock([NotNull] MiniLanguageParser.ElseBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileBlock([NotNull] MiniLanguageParser.WhileBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.forBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForBlock([NotNull] MiniLanguageParser.ForBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] MiniLanguageParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.declOrAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclOrAssign([NotNull] MiniLanguageParser.DeclOrAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] MiniLanguageParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.assignation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignation([NotNull] MiniLanguageParser.AssignationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>intConstant</c>
	/// labeled alternative in <see cref="MiniLanguageParser.constantValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntConstant([NotNull] MiniLanguageParser.IntConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>floatConstant</c>
	/// labeled alternative in <see cref="MiniLanguageParser.constantValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatConstant([NotNull] MiniLanguageParser.FloatConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>doubleConstant</c>
	/// labeled alternative in <see cref="MiniLanguageParser.constantValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoubleConstant([NotNull] MiniLanguageParser.DoubleConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringConstant</c>
	/// labeled alternative in <see cref="MiniLanguageParser.constantValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringConstant([NotNull] MiniLanguageParser.StringConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.variableType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableType([NotNull] MiniLanguageParser.VariableTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLanguageParser.relationalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalOperator([NotNull] MiniLanguageParser.RelationalOperatorContext context);
}
