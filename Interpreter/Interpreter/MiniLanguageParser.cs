//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Cristian/source/repos/CompilatorLFC/CompilatorLFC/MiniLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, INTEGER_TYPE=2, FLOAT_TYPE=3, DOUBLE_TYPE=4, STRING_TYPE=5, VOID_TYPE=6, 
		IF_KW=7, ELSE_KW=8, FOR_KW=9, WHILE_KW=10, RETURN_KW=11, POWER=12, ASTERISK=13, 
		SLASH=14, MOD=15, PLUS=16, MINUS=17, LESS=18, GREATER=19, LESSEQ=20, GREATEREQ=21, 
		CONDITIONEQUAL=22, NOTEQUAL=23, AND=24, OR=25, NOT=26, PLUSEQUALS=27, 
		MINUSEQUALS=28, ASTERISKEQUALS=29, SLASHEQUALS=30, MODEQUALS=31, INCREMENTOP=32, 
		DECREMENTOP=33, EQUALS=34, SEMICOLON=35, COMMA=36, OPENPARAN=37, CLOSEDPARAN=38, 
		OPENBRAC=39, CLOSEDBRAC=40, INTEGER_VALUE=41, FLOAT_VALUE=42, DOUBLE_VALUE=43, 
		STRING_VALUE=44, VARIABLE_NAME=45, WS=46, LINE_COMMENT=47, BLOCK_COMMENT=48;
	public const int
		RULE_program = 0, RULE_globalLine = 1, RULE_functionDeclaration = 2, RULE_returnType = 3, 
		RULE_printFunction = 4, RULE_parameterList = 5, RULE_parameter = 6, RULE_functionBody = 7, 
		RULE_returnStatement = 8, RULE_functionCall = 9, RULE_argumentList = 10, 
		RULE_argument = 11, RULE_expression = 12, RULE_condition = 13, RULE_increment = 14, 
		RULE_decrement = 15, RULE_instructionSet = 16, RULE_block = 17, RULE_codeBlock = 18, 
		RULE_ifBlock = 19, RULE_elseBlock = 20, RULE_whileBlock = 21, RULE_forBlock = 22, 
		RULE_statement = 23, RULE_declOrAssign = 24, RULE_declaration = 25, RULE_assignation = 26, 
		RULE_constantValue = 27, RULE_variableType = 28, RULE_relationalOperator = 29;
	public static readonly string[] ruleNames = {
		"program", "globalLine", "functionDeclaration", "returnType", "printFunction", 
		"parameterList", "parameter", "functionBody", "returnStatement", "functionCall", 
		"argumentList", "argument", "expression", "condition", "increment", "decrement", 
		"instructionSet", "block", "codeBlock", "ifBlock", "elseBlock", "whileBlock", 
		"forBlock", "statement", "declOrAssign", "declaration", "assignation", 
		"constantValue", "variableType", "relationalOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Print'", "'int'", "'float'", "'double'", "'string'", "'void'", 
		"'if'", "'else'", "'for'", "'while'", "'return'", "'^'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", 
		"'||'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'++'", "'--'", 
		"'='", "';'", "','", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", 
		"VOID_TYPE", "IF_KW", "ELSE_KW", "FOR_KW", "WHILE_KW", "RETURN_KW", "POWER", 
		"ASTERISK", "SLASH", "MOD", "PLUS", "MINUS", "LESS", "GREATER", "LESSEQ", 
		"GREATEREQ", "CONDITIONEQUAL", "NOTEQUAL", "AND", "OR", "NOT", "PLUSEQUALS", 
		"MINUSEQUALS", "ASTERISKEQUALS", "SLASHEQUALS", "MODEQUALS", "INCREMENTOP", 
		"DECREMENTOP", "EQUALS", "SEMICOLON", "COMMA", "OPENPARAN", "CLOSEDPARAN", 
		"OPENBRAC", "CLOSEDBRAC", "INTEGER_VALUE", "FLOAT_VALUE", "DOUBLE_VALUE", 
		"STRING_VALUE", "VARIABLE_NAME", "WS", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalLineContext[] globalLine() {
			return GetRuleContexts<GlobalLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalLineContext globalLine(int i) {
			return GetRuleContext<GlobalLineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 124L) != 0)) {
				{
				{
				State = 60;
				globalLine();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		public GlobalLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalLineContext globalLine() {
		GlobalLineContext _localctx = new GlobalLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalLine);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				functionDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 67;
				declaration();
				State = 68;
				Match(SEMICOLON);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			returnType();
			State = 73;
			Match(VARIABLE_NAME);
			State = 74;
			Match(OPENPARAN);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) {
				{
				State = 75;
				parameterList();
				}
			}

			State = 78;
			Match(CLOSEDPARAN);
			State = 79;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(MiniLanguageParser.VOID_TYPE, 0); }
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_returnType);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				variableType();
				}
				break;
			case VOID_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				Match(VOID_TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		public PrintFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintFunctionContext printFunction() {
		PrintFunctionContext _localctx = new PrintFunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_printFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__0);
			State = 86;
			Match(OPENPARAN);
			State = 87;
			expression(0);
			State = 88;
			Match(CLOSEDPARAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniLanguageParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			parameter();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 91;
				Match(COMMA);
				State = 92;
				parameter();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			variableType();
			State = 99;
			Match(VARIABLE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRAC() { return GetToken(MiniLanguageParser.OPENBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDBRAC() { return GetToken(MiniLanguageParser.CLOSEDBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext[] instructionSet() {
			return GetRuleContexts<InstructionSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext instructionSet(int i) {
			return GetRuleContext<InstructionSetContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(OPENBRAC);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35781372546750L) != 0)) {
				{
				{
				State = 102;
				instructionSet();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(CLOSEDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_KW() { return GetToken(MiniLanguageParser.RETURN_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(RETURN_KW);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68320044908544L) != 0)) {
				{
				State = 111;
				expression(0);
				}
			}

			State = 114;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(VARIABLE_NAME);
			State = 117;
			Match(OPENPARAN);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68320044908544L) != 0)) {
				{
				State = 118;
				argumentList();
				}
			}

			State = 121;
			Match(CLOSEDPARAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniLanguageParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			argument();
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 124;
				Match(COMMA);
				State = 125;
				argument();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecrementExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		public DecrementExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantAtomExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public ConstantAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniLanguageParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public IncrementExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		public NumericAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(MiniLanguageParser.POWER, 0); }
		public PowerExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(MiniLanguageParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(MiniLanguageParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniLanguageParser.MOD, 0); }
		public MulDivModExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivModExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniLanguageParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniLanguageParser.MINUS, 0); }
		public AddSubExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 134;
				Match(OPENPARAN);
				State = 135;
				expression(0);
				State = 136;
				Match(CLOSEDPARAN);
				}
				break;
			case 2:
				{
				_localctx = new MinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138;
				Match(MINUS);
				State = 139;
				expression(8);
				}
				break;
			case 3:
				{
				_localctx = new FunctionExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new IncrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 141;
				increment();
				}
				break;
			case 5:
				{
				_localctx = new DecrementExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142;
				decrement();
				}
				break;
			case 6:
				{
				_localctx = new NumericAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				Match(VARIABLE_NAME);
				}
				break;
			case 7:
				{
				_localctx = new ConstantAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				constantValue();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new PowerExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 148;
						Match(POWER);
						State = 149;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new MulDivModExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 151;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 152;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new AddSubExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 154;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 155;
						expression(7);
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParanthesisCondContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		public ParanthesisCondContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanthesisCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCondContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpCondContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalOpCondContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public RelationalOpCondContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOpCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotCondContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MiniLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public NotCondContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOpCondContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MiniLanguageParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MiniLanguageParser.OR, 0); }
		public LogicalOpCondContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOpCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(Context, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new ParanthesisCondContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 162;
				Match(OPENPARAN);
				State = 163;
				condition(0);
				State = 164;
				Match(CLOSEDPARAN);
				}
				break;
			case 2:
				{
				_localctx = new NotCondContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 166;
				Match(NOT);
				State = 167;
				condition(4);
				}
				break;
			case 3:
				{
				_localctx = new RelationalOpCondContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 168;
				expression(0);
				State = 169;
				relationalOperator();
				State = 170;
				expression(0);
				}
				break;
			case 4:
				{
				_localctx = new ExpCondContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOpCondContext(new ConditionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_condition);
					State = 175;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 176;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 177;
					condition(3);
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
	 
		public IncrementContext() { }
		public virtual void CopyFrom(IncrementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreIncrementationContext : IncrementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTOP() { return GetToken(MiniLanguageParser.INCREMENTOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		public PreIncrementationContext(IncrementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementationContext : IncrementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTOP() { return GetToken(MiniLanguageParser.INCREMENTOP, 0); }
		public PostIncrementationContext(IncrementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 28, RULE_increment);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_NAME:
				_localctx = new PostIncrementationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				Match(VARIABLE_NAME);
				State = 184;
				Match(INCREMENTOP);
				}
				break;
			case INCREMENTOP:
				_localctx = new PreIncrementationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(INCREMENTOP);
				State = 186;
				Match(VARIABLE_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementContext : ParserRuleContext {
		public DecrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrement; } }
	 
		public DecrementContext() { }
		public virtual void CopyFrom(DecrementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostDecrementationContext : DecrementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTOP() { return GetToken(MiniLanguageParser.DECREMENTOP, 0); }
		public PostDecrementationContext(DecrementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementationContext : DecrementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTOP() { return GetToken(MiniLanguageParser.DECREMENTOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		public PreDecrementationContext(DecrementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementContext decrement() {
		DecrementContext _localctx = new DecrementContext(Context, State);
		EnterRule(_localctx, 30, RULE_decrement);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_NAME:
				_localctx = new PostDecrementationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				Match(VARIABLE_NAME);
				State = 190;
				Match(DECREMENTOP);
				}
				break;
			case DECREMENTOP:
				_localctx = new PreDecrementationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				Match(DECREMENTOP);
				State = 192;
				Match(VARIABLE_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public InstructionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionSetContext instructionSet() {
		InstructionSetContext _localctx = new InstructionSetContext(Context, State);
		EnterRule(_localctx, 32, RULE_instructionSet);
		int _la;
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
			case INCREMENTOP:
			case DECREMENTOP:
			case SEMICOLON:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35197256990782L) != 0)) {
					{
					State = 195;
					statement();
					}
				}

				State = 198;
				Match(SEMICOLON);
				}
				}
				break;
			case IF_KW:
			case FOR_KW:
			case WHILE_KW:
			case OPENBRAC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				block();
				}
				break;
			case RETURN_KW:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForBlockContext forBlock() {
			return GetRuleContext<ForBlockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_block);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENBRAC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				codeBlock();
				}
				break;
			case IF_KW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				ifBlock();
				}
				break;
			case WHILE_KW:
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				whileBlock();
				}
				break;
			case FOR_KW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 206;
				forBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRAC() { return GetToken(MiniLanguageParser.OPENBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDBRAC() { return GetToken(MiniLanguageParser.CLOSEDBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext[] instructionSet() {
			return GetRuleContexts<InstructionSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext instructionSet(int i) {
			return GetRuleContext<InstructionSetContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(OPENBRAC);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35781372546750L) != 0)) {
				{
				{
				State = 210;
				instructionSet();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(CLOSEDBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_KW() { return GetToken(MiniLanguageParser.IF_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext instructionSet() {
			return GetRuleContext<InstructionSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(IF_KW);
			State = 219;
			Match(OPENPARAN);
			State = 220;
			condition(0);
			State = 221;
			Match(CLOSEDPARAN);
			State = 222;
			instructionSet();
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 223;
				elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext instructionSet() {
			return GetRuleContext<InstructionSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_KW() { return GetToken(MiniLanguageParser.ELSE_KW, 0); }
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 226;
			Match(ELSE_KW);
			}
			State = 227;
			instructionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_KW() { return GetToken(MiniLanguageParser.WHILE_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext instructionSet() {
			return GetRuleContext<InstructionSetContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(WHILE_KW);
			State = 230;
			Match(OPENPARAN);
			State = 231;
			condition(0);
			State = 232;
			Match(CLOSEDPARAN);
			State = 233;
			instructionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_KW() { return GetToken(MiniLanguageParser.FOR_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARAN() { return GetToken(MiniLanguageParser.OPENPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEDPARAN() { return GetToken(MiniLanguageParser.CLOSEDPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionSetContext instructionSet() {
			return GetRuleContext<InstructionSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclOrAssignContext declOrAssign() {
			return GetRuleContext<DeclOrAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_forBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(FOR_KW);
			State = 236;
			Match(OPENPARAN);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372088892L) != 0)) {
				{
				State = 237;
				declOrAssign();
				}
			}

			State = 240;
			Match(SEMICOLON);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68320112017408L) != 0)) {
				{
				State = 241;
				condition(0);
				}
			}

			State = 244;
			Match(SEMICOLON);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35197256990782L) != 0)) {
				{
				State = 245;
				statement();
				}
			}

			State = 248;
			Match(CLOSEDPARAN);
			State = 249;
			instructionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclOrAssignContext declOrAssign() {
			return GetRuleContext<DeclOrAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintFunctionContext printFunction() {
			return GetRuleContext<PrintFunctionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 251;
				increment();
				}
				break;
			case 2:
				{
				State = 252;
				decrement();
				}
				break;
			case 3:
				{
				State = 253;
				functionCall();
				}
				break;
			case 4:
				{
				State = 254;
				declOrAssign();
				}
				break;
			case 5:
				{
				State = 255;
				printFunction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclOrAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignationContext assignation() {
			return GetRuleContext<AssignationContext>(0);
		}
		public DeclOrAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declOrAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclOrAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclOrAssignContext declOrAssign() {
		DeclOrAssignContext _localctx = new DeclOrAssignContext(Context, State);
		EnterRule(_localctx, 48, RULE_declOrAssign);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				declaration();
				}
				break;
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				assignation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			variableType();
			State = 263;
			Match(VARIABLE_NAME);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 264;
				Match(EQUALS);
				State = 265;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUALS() { return GetToken(MiniLanguageParser.PLUSEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQUALS() { return GetToken(MiniLanguageParser.MINUSEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISKEQUALS() { return GetToken(MiniLanguageParser.ASTERISKEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUALS() { return GetToken(MiniLanguageParser.SLASHEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEQUALS() { return GetToken(MiniLanguageParser.MODEQUALS, 0); }
		public AssignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignationContext assignation() {
		AssignationContext _localctx = new AssignationContext(Context, State);
		EnterRule(_localctx, 52, RULE_assignation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(VARIABLE_NAME);
			State = 269;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 21340618752L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 270;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
	 
		public ConstantValueContext() { }
		public virtual void CopyFrom(ConstantValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntConstantContext : ConstantValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(MiniLanguageParser.INTEGER_VALUE, 0); }
		public IntConstantContext(ConstantValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringConstantContext : ConstantValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(MiniLanguageParser.STRING_VALUE, 0); }
		public StringConstantContext(ConstantValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatConstantContext : ConstantValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(MiniLanguageParser.FLOAT_VALUE, 0); }
		public FloatConstantContext(ConstantValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleConstantContext : ConstantValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VALUE() { return GetToken(MiniLanguageParser.DOUBLE_VALUE, 0); }
		public DoubleConstantContext(ConstantValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_constantValue);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_VALUE:
				_localctx = new IntConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				Match(INTEGER_VALUE);
				}
				break;
			case FLOAT_VALUE:
				_localctx = new FloatConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				Match(FLOAT_VALUE);
				}
				break;
			case DOUBLE_VALUE:
				_localctx = new DoubleConstantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 274;
				Match(DOUBLE_VALUE);
				}
				break;
			case STRING_VALUE:
				_localctx = new StringConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 275;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(MiniLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(MiniLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(MiniLanguageParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(MiniLanguageParser.STRING_TYPE, 0); }
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MiniLanguageParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MiniLanguageParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQ() { return GetToken(MiniLanguageParser.LESSEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQ() { return GetToken(MiniLanguageParser.GREATEREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONEQUAL() { return GetToken(MiniLanguageParser.CONDITIONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(MiniLanguageParser.NOTEQUAL, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16515072L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 13: return condition_sempred((ConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,48,283,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,5,0,62,8,0,10,0,12,0,65,9,0,1,1,1,1,1,1,1,1,3,1,71,8,1,1,
		2,1,2,1,2,1,2,3,2,77,8,2,1,2,1,2,1,2,1,3,1,3,3,3,84,8,3,1,4,1,4,1,4,1,
		4,1,4,1,5,1,5,1,5,5,5,94,8,5,10,5,12,5,97,9,5,1,6,1,6,1,6,1,7,1,7,5,7,
		104,8,7,10,7,12,7,107,9,7,1,7,1,7,1,8,1,8,3,8,113,8,8,1,8,1,8,1,9,1,9,
		1,9,3,9,120,8,9,1,9,1,9,1,10,1,10,1,10,5,10,127,8,10,10,10,12,10,130,9,
		10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,3,12,146,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,157,
		8,12,10,12,12,12,160,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,174,8,13,1,13,1,13,1,13,5,13,179,8,13,10,13,12,13,
		182,9,13,1,14,1,14,1,14,1,14,3,14,188,8,14,1,15,1,15,1,15,1,15,3,15,194,
		8,15,1,16,3,16,197,8,16,1,16,1,16,1,16,3,16,202,8,16,1,17,1,17,1,17,1,
		17,3,17,208,8,17,1,18,1,18,5,18,212,8,18,10,18,12,18,215,9,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,225,8,19,1,20,1,20,1,20,1,21,1,21,1,
		21,1,21,1,21,1,21,1,22,1,22,1,22,3,22,239,8,22,1,22,1,22,3,22,243,8,22,
		1,22,1,22,3,22,247,8,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,257,
		8,23,1,24,1,24,3,24,261,8,24,1,25,1,25,1,25,1,25,3,25,267,8,25,1,26,1,
		26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,277,8,27,1,28,1,28,1,29,1,29,1,29,
		0,2,24,26,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,0,6,1,0,13,15,1,0,16,17,1,0,24,25,2,0,27,31,
		34,34,1,0,2,5,1,0,18,23,296,0,63,1,0,0,0,2,70,1,0,0,0,4,72,1,0,0,0,6,83,
		1,0,0,0,8,85,1,0,0,0,10,90,1,0,0,0,12,98,1,0,0,0,14,101,1,0,0,0,16,110,
		1,0,0,0,18,116,1,0,0,0,20,123,1,0,0,0,22,131,1,0,0,0,24,145,1,0,0,0,26,
		173,1,0,0,0,28,187,1,0,0,0,30,193,1,0,0,0,32,201,1,0,0,0,34,207,1,0,0,
		0,36,209,1,0,0,0,38,218,1,0,0,0,40,226,1,0,0,0,42,229,1,0,0,0,44,235,1,
		0,0,0,46,256,1,0,0,0,48,260,1,0,0,0,50,262,1,0,0,0,52,268,1,0,0,0,54,276,
		1,0,0,0,56,278,1,0,0,0,58,280,1,0,0,0,60,62,3,2,1,0,61,60,1,0,0,0,62,65,
		1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,1,1,0,0,0,65,63,1,0,0,0,66,71,3,
		4,2,0,67,68,3,50,25,0,68,69,5,35,0,0,69,71,1,0,0,0,70,66,1,0,0,0,70,67,
		1,0,0,0,71,3,1,0,0,0,72,73,3,6,3,0,73,74,5,45,0,0,74,76,5,37,0,0,75,77,
		3,10,5,0,76,75,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,5,38,0,0,79,80,
		3,14,7,0,80,5,1,0,0,0,81,84,3,56,28,0,82,84,5,6,0,0,83,81,1,0,0,0,83,82,
		1,0,0,0,84,7,1,0,0,0,85,86,5,1,0,0,86,87,5,37,0,0,87,88,3,24,12,0,88,89,
		5,38,0,0,89,9,1,0,0,0,90,95,3,12,6,0,91,92,5,36,0,0,92,94,3,12,6,0,93,
		91,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,11,1,0,0,0,97,
		95,1,0,0,0,98,99,3,56,28,0,99,100,5,45,0,0,100,13,1,0,0,0,101,105,5,39,
		0,0,102,104,3,32,16,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,
		105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,40,0,0,109,15,
		1,0,0,0,110,112,5,11,0,0,111,113,3,24,12,0,112,111,1,0,0,0,112,113,1,0,
		0,0,113,114,1,0,0,0,114,115,5,35,0,0,115,17,1,0,0,0,116,117,5,45,0,0,117,
		119,5,37,0,0,118,120,3,20,10,0,119,118,1,0,0,0,119,120,1,0,0,0,120,121,
		1,0,0,0,121,122,5,38,0,0,122,19,1,0,0,0,123,128,3,22,11,0,124,125,5,36,
		0,0,125,127,3,22,11,0,126,124,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,
		128,129,1,0,0,0,129,21,1,0,0,0,130,128,1,0,0,0,131,132,3,24,12,0,132,23,
		1,0,0,0,133,134,6,12,-1,0,134,135,5,37,0,0,135,136,3,24,12,0,136,137,5,
		38,0,0,137,146,1,0,0,0,138,139,5,17,0,0,139,146,3,24,12,8,140,146,3,18,
		9,0,141,146,3,28,14,0,142,146,3,30,15,0,143,146,5,45,0,0,144,146,3,54,
		27,0,145,133,1,0,0,0,145,138,1,0,0,0,145,140,1,0,0,0,145,141,1,0,0,0,145,
		142,1,0,0,0,145,143,1,0,0,0,145,144,1,0,0,0,146,158,1,0,0,0,147,148,10,
		9,0,0,148,149,5,12,0,0,149,157,3,24,12,9,150,151,10,7,0,0,151,152,7,0,
		0,0,152,157,3,24,12,8,153,154,10,6,0,0,154,155,7,1,0,0,155,157,3,24,12,
		7,156,147,1,0,0,0,156,150,1,0,0,0,156,153,1,0,0,0,157,160,1,0,0,0,158,
		156,1,0,0,0,158,159,1,0,0,0,159,25,1,0,0,0,160,158,1,0,0,0,161,162,6,13,
		-1,0,162,163,5,37,0,0,163,164,3,26,13,0,164,165,5,38,0,0,165,174,1,0,0,
		0,166,167,5,26,0,0,167,174,3,26,13,4,168,169,3,24,12,0,169,170,3,58,29,
		0,170,171,3,24,12,0,171,174,1,0,0,0,172,174,3,24,12,0,173,161,1,0,0,0,
		173,166,1,0,0,0,173,168,1,0,0,0,173,172,1,0,0,0,174,180,1,0,0,0,175,176,
		10,2,0,0,176,177,7,2,0,0,177,179,3,26,13,3,178,175,1,0,0,0,179,182,1,0,
		0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,27,1,0,0,0,182,180,1,0,0,0,183,
		184,5,45,0,0,184,188,5,32,0,0,185,186,5,32,0,0,186,188,5,45,0,0,187,183,
		1,0,0,0,187,185,1,0,0,0,188,29,1,0,0,0,189,190,5,45,0,0,190,194,5,33,0,
		0,191,192,5,33,0,0,192,194,5,45,0,0,193,189,1,0,0,0,193,191,1,0,0,0,194,
		31,1,0,0,0,195,197,3,46,23,0,196,195,1,0,0,0,196,197,1,0,0,0,197,198,1,
		0,0,0,198,202,5,35,0,0,199,202,3,34,17,0,200,202,3,16,8,0,201,196,1,0,
		0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,33,1,0,0,0,203,208,3,36,18,0,204,
		208,3,38,19,0,205,208,3,42,21,0,206,208,3,44,22,0,207,203,1,0,0,0,207,
		204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,0,208,35,1,0,0,0,209,213,5,39,
		0,0,210,212,3,32,16,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,
		213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,40,0,0,217,37,
		1,0,0,0,218,219,5,7,0,0,219,220,5,37,0,0,220,221,3,26,13,0,221,222,5,38,
		0,0,222,224,3,32,16,0,223,225,3,40,20,0,224,223,1,0,0,0,224,225,1,0,0,
		0,225,39,1,0,0,0,226,227,5,8,0,0,227,228,3,32,16,0,228,41,1,0,0,0,229,
		230,5,10,0,0,230,231,5,37,0,0,231,232,3,26,13,0,232,233,5,38,0,0,233,234,
		3,32,16,0,234,43,1,0,0,0,235,236,5,9,0,0,236,238,5,37,0,0,237,239,3,48,
		24,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,242,5,35,0,0,
		241,243,3,26,13,0,242,241,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,
		246,5,35,0,0,245,247,3,46,23,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,
		1,0,0,0,248,249,5,38,0,0,249,250,3,32,16,0,250,45,1,0,0,0,251,257,3,28,
		14,0,252,257,3,30,15,0,253,257,3,18,9,0,254,257,3,48,24,0,255,257,3,8,
		4,0,256,251,1,0,0,0,256,252,1,0,0,0,256,253,1,0,0,0,256,254,1,0,0,0,256,
		255,1,0,0,0,257,47,1,0,0,0,258,261,3,50,25,0,259,261,3,52,26,0,260,258,
		1,0,0,0,260,259,1,0,0,0,261,49,1,0,0,0,262,263,3,56,28,0,263,266,5,45,
		0,0,264,265,5,34,0,0,265,267,3,24,12,0,266,264,1,0,0,0,266,267,1,0,0,0,
		267,51,1,0,0,0,268,269,5,45,0,0,269,270,7,3,0,0,270,271,3,24,12,0,271,
		53,1,0,0,0,272,277,5,41,0,0,273,277,5,42,0,0,274,277,5,43,0,0,275,277,
		5,44,0,0,276,272,1,0,0,0,276,273,1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,
		0,277,55,1,0,0,0,278,279,7,4,0,0,279,57,1,0,0,0,280,281,7,5,0,0,281,59,
		1,0,0,0,28,63,70,76,83,95,105,112,119,128,145,156,158,173,180,187,193,
		196,201,207,213,224,238,242,246,256,260,266,276
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
